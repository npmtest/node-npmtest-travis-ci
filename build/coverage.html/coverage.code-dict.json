{"/home/travis/build/npmtest/node-npmtest-travis-ci/test.js":"/* istanbul instrument in package npmtest_travis_ci */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-travis-ci/lib.npmtest_travis_ci.js":"/* istanbul instrument in package npmtest_travis_ci */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_travis_ci = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_travis_ci = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-travis-ci/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-travis-ci && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_travis_ci */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_travis_ci\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_travis_ci.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_travis_ci.rollup.js'] =\n            local.assetsDict['/assets.npmtest_travis_ci.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_travis_ci.__dirname + '/lib.npmtest_travis_ci.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-travis-ci/node_modules/travis-ci/lib/travis-ci.js":"'use strict';\n\nvar assert = require('assert');\nvar _ = require('lodash');\nvar util = require('util');\nvar TravisHttp = require('./travis-http');\nvar GitHub = require('github');\nvar assert = require('assert');\n\nvar PARAM = ':param';\nvar TEMP_URI = 'tempUri';\n\nvar getRouteTree = function (routes) {\n    var functions = _(routes).filter(function (route) {\n        return !_.compact(route[TEMP_URI].split('/')).length;\n    }).map(function (route) {\n        return _.omit(route, TEMP_URI);\n    }).value();\n    var paths = _(routes).filter(function (route) {\n        return _.compact(route[TEMP_URI].split('/')).length;\n    }).groupBy(function (route) {\n        var segment = _(route[TEMP_URI].split('/')).compact().first();\n        return segment[0] === ':' ? PARAM : segment;\n    }).value();\n    _.each(paths, function (routes) {\n        _.each(routes, function (route) {\n            route[TEMP_URI] = _(route[TEMP_URI].split('/')).compact().rest().value().join('/');\n        });\n    });\n    for (var prefix in paths) {\n        paths[prefix] = getRouteTree(paths[prefix]);\n    }\n    return {\n        functions: functions,\n        paths: paths\n    };\n};\n\nvar createFunctionTree = function (context, obj, tree, url) {\n    _.each(tree.functions, function (fn) {\n        obj[fn.verb.toLowerCase()] = function (data, callback) {\n            if (typeof data === 'function') {\n                callback = data;\n                data = undefined;\n            }\n\n            return context.agent.request(fn.verb, url, data, function (err, res) {\n                if (err && err.error) {\n                    callback(new Error(err.error.message || err.error));\n                } else {\n                    callback(err, res);\n                }\n            });\n        };\n    });\n    _.each(tree.paths, function (subtree, prefix) {\n        if (subtree.paths.hasOwnProperty(PARAM)) {\n            obj[prefix] = function () {\n                var args = _.toArray(arguments);\n                assert(_.all(args, function (arg) {\n                    return _.isString(arg) || _.isNumber(arg);\n                }), 'all url parameter must be strings');\n\n                var retSubtree = subtree;\n                var retPrefix = '';\n                for (var i = 0; i < args.length; ++i) {\n                    assert(retSubtree.paths.hasOwnProperty(PARAM), 'too many param function arguments');\n                    retSubtree = retSubtree.paths[PARAM];\n                    retPrefix += '/' + args[i];\n                }\n\n                var ret = {};\n                createFunctionTree(context, ret, retSubtree, url + '/' + prefix + retPrefix);\n                return ret;\n            };\n        } else {\n            obj[prefix] = {};\n        }\n        createFunctionTree(context, obj[prefix], subtree, url + '/' + prefix);\n    });\n};\n\nvar TravisClient = function (config) {\n    this.pro = config.pro || false;\n    this.agent = new TravisHttp(this.pro, config.headers);\n\n    if (!config.hasOwnProperty('version')) {\n        throw 'must specify api version';\n    }\n\n    var version = config.version;\n    var routes = _(require('../api/v' + version + '/routes.json')).pluck('routes').flatten(true).map(function (route) {\n        route[TEMP_URI] = _(route.uri.split('/')).compact().value().join('/');\n        return route;\n    }).value();\n\n    createFunctionTree(this, this, getRouteTree(routes), '');\n};\nutil.inherits(TravisClient, TravisHttp);\n\nTravisClient.prototype._authenticateAccessToken = function (msg, callback) {\n    assert(_.isObject(msg), msg);\n    assert(msg.hasOwnProperty('access_token'), msg);\n    assert(_.isFunction(callback));\n    this.agent.request('GET', '/users', msg, function (err) {\n        if (err) { return callback(err); }\n\n        this.agent.setAccessToken(msg.access_token);\n        return callback(null, msg);\n    }.bind(this));\n};\n\nTravisClient.prototype._authenticateGithubToken = function (msg, callback) {\n    assert(_.isObject(msg), msg);\n    assert(msg.hasOwnProperty('github_token'), msg);\n    assert(_.isFunction(callback));\n    this.auth.github.post(msg, function (err, res) {\n        if (err) { return callback(err); }\n\n        this._authenticateAccessToken(res, callback);\n    }.bind(this));\n};\n\nTravisClient.prototype._authenticateBasic = function (msg, callback) {\n    assert(_.isObject(msg), msg);\n    assert(msg.hasOwnProperty('username'), msg);\n    assert(msg.hasOwnProperty('password'), msg);\n    assert(_.isFunction(callback));\n\n    var GITHUB_TRAVIS_APP_INFO = {\n        app: {\n            name: 'Travis CI',\n            url: 'https://travis-ci.org'\n        }\n    };\n    var GITHUB_TRAVIS_PRO_APP_INFO = {\n        app: {\n            name: 'Travis CI Pro',\n            url: 'https://travis-ci.com'\n        }\n    };\n\n    var github = new GitHub({\n        version: '3.0.0'\n    });\n    github.authenticate({\n        type: 'basic',\n        username: msg.username,\n        password: msg.password\n    });\n\n    github.authorization.getAll({}, function (err, res) {\n        if (err) { return callback(err); }\n        var app = _.findWhere(res, this.pro ? GITHUB_TRAVIS_PRO_APP_INFO : GITHUB_TRAVIS_APP_INFO);\n\n        if (!app) {\n            return callback('travis github token not found');\n        }\n\n        this._authenticateGithubToken({\n            github_token: app.token\n        }, callback);\n    }.bind(this));\n};\n\nTravisClient.prototype.authenticate = function (msg, callback) {\n    if (!_.isFunction(callback)) {\n        throw new Error('expected callback to be a function');\n    }\n\n    if (!_.isObject(msg)) {\n        return callback('expected an object');\n    }\n\n    if (_.difference(_.keys(msg), ['username', 'password']).length === 0) {\n        return this._authenticateBasic(msg, callback);\n    } else if (_.difference(_.keys(msg), ['access_token']).length === 0) {\n        return this._authenticateAccessToken(msg, callback);\n    } else if (_.difference(_.keys(msg), ['github_token']).length === 0) {\n        return this._authenticateGithubToken(msg, callback);\n    } else {\n        return callback('unexpected arguments');\n    }\n};\n\nTravisClient.prototype.isAuthenticated = function () {\n    return !!this._getAccessToken();\n};\n\nmodule.exports = TravisClient;","/home/travis/build/npmtest/node-npmtest-travis-ci/node_modules/travis-ci/lib/travis-http.js":"'use strict';\n\nvar request = require('request');\n\nvar TRAVIS_ENDPOINT = 'https://api.travis-ci.org';\nvar TRAVIS_PRO_ENDPOINT = 'https://api.travis-ci.com';\n\nvar TravisHttp = function (pro, headers) {\n    this._endpoint = pro ? TRAVIS_PRO_ENDPOINT : TRAVIS_ENDPOINT;\n    this._headers = headers ? JSON.parse(JSON.stringify(headers)) : {};\n};\n\nTravisHttp.prototype._getHeaders = function () {\n    var headers = JSON.parse(JSON.stringify(this._headers));\n    headers.Accept = 'application/vnd.travis-ci.2+json, */*; q=0.01';\n    if (this._getAccessToken()) {\n        headers.Authorization = 'token ' + this._getAccessToken();\n    }\n    return headers;\n};\n\nTravisHttp.prototype.request = function (method, path, data, callback) {\n    if (typeof data === 'function') {\n        callback = data;\n        data = undefined;\n    }\n\n    var options = {\n        method: method,\n        url: this._endpoint + path,\n        headers: this._getHeaders()\n    };\n\n    if (data instanceof Buffer) {\n        options.body = data;\n    } else {\n        options.json = data || true;\n    }\n    return request(options, function (err, res) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (res.headers['content-type'] === 'application/json' && !options.json) {\n            res.body = JSON.parse(res.body);\n        }\n\n        if (res.statusCode >= 400) {\n            callback(res.body || res.statusCode);\n        } else {\n            callback(null, res.body);\n        }\n    });\n};\n\nTravisHttp.prototype.setAccessToken = function (accessToken) {\n    this._accessToken = accessToken;\n};\n\nTravisHttp.prototype._getAccessToken = function () {\n    return this._accessToken;\n};\n\nmodule.exports = TravisHttp;\n","/home/travis/build/npmtest/node-npmtest-travis-ci/node_modules/travis-ci/bin/travis-ci.js":"#!/usr/bin/env node\n\n'use strict';\nvar _ = require('lodash');\nvar Travis = require('../lib/travis-ci');\nvar domain = require('domain').create();\n\nvar coerseType = function (arg) {\n    var num = parseInt(arg, 10);\n    var ret;\n    if (_.isNaN(num) || Number(num).toString() !== arg) {\n        ret = arg;\n    } else {\n        ret = num;\n    }\n    return ret;\n};\n\ndomain.on('error', function (err) {\n    console.log(err.message);\n});\n\ndomain.run(function () {\n    // Strip off node and the file path to this file.\n    var argv = _.rest(process.argv, 2);\n    // Check if we should make calls to the pro server.\n    var pro = _.contains(argv, '--pro');\n\n    // Parse off arguments that are part of the function path.\n    var subCommands = _.select(argv, function (arg) {\n        return arg.indexOf('--') !== 0;\n    });\n    if (subCommands.length === 0) {\n      throw new Error('no subcommand provided'); // TODO: display help\n    }\n    // Parse off args that will be passed as args to the function.\n    var args = _(argv).select(function (arg) {\n        return arg.indexOf('--') === 0;\n    }).without('--pro').map(function (arg) {\n        var split = arg.substr(2).split('=');\n        return [split[0], coerseType(split[1])];\n    }).object().value();\n\n    var travis = new Travis({\n        version: '2.0.0',\n        pro: pro\n    });\n    var func = travis;\n    // Iterate until we find the right function.\n    _.each(subCommands, function (subCommand) {\n        func = func[subCommand];\n        if (_.isUndefined(func) || _.isNull(func)) {\n            throw new Error(subCommand + ' not found');\n        }\n    });\n\n    // Call the function and deliver the news.\n    func.call(travis, args, function (err, res) {\n        if (err) {\n            throw new Error(err);\n        }\n        console.log(JSON.stringify(res, null, 4));\n    });\n});"}